configfile: 'config.yaml'

chromosomes = list(range(1,23))
paths = config['paths']
# substituted wildcards
yaml_wildcards = ['output_root', 'sample_name']
for wild in yaml_wildcards:
    for key, filename in paths.items():
        fmt = f'{{{wild}}}'
        if fmt in filename:
            paths[key] = filename.replace(fmt, paths[wild])

populations = []
if 'sample_file' in paths:
    populations = glob_wildcards(paths['sample_file']).population

if len(populations) == 0:
    paths['ibd_output'] = paths['ibd_output'].replace('{population}', 'ALL')
    paths['ibd_summary'] = paths['ibd_summary'].replace('{population}', 'ALL')
    populations = ['ALL']

def all_input(wildcards):
    params = {'chrom': chromosomes}
    path = paths['ibd_output']

    if 'summary_lod' in config['IBDmix']:
        path = paths['combined_summary']
        params['LOD'] = config['IBDmix']['summary_lod']
        params['length'] = config['IBDmix']['summary_length']

    if '{population}' in path:
        params['population'] = populations

    return expand(path, **params)

rule all:
    input:
        all_input

rule make_generate_gt:
    input:
        paths['source_root'] + 'generate_gt.cpp'

    output:
        paths['exe_root'].format(exe='generate_gt')

    shell:
        '{config[compiler]} {config[compiler_options]} {input} -o {output}'

rule generate_gt:
    input:
        modern=paths['modern_vcf'],
        archaic=paths['archaic_vcf'],
        exe=paths['exe_root'].format(exe='generate_gt')

    output:
        paths['genotype_file']

    threads: 2

    shell:
        '{input.exe} '
            '--archaic <(zcat {input.archaic}) '
            '--modern <(zcat {input.modern}) '
            '--output >(gzip > {output}) '

rule make_ibdmix:
    input:
        [paths['source_root'] + src + '.cpp' for src in
            ('IBD_Collection', 'IBD_Segment', 'IBD_Stack',
             'Genotype_Reader', 'IBDmix')]

    output:
        paths['exe_root'].format(exe='ibdmix')

    shell:
        '{config[compiler]} {config[compiler_options]} {input} -o {output}'

def get_ibd_input(wildcards):
    result = {'genotype': paths['genotype_file'].format(chrom=wildcards.chrom),
              'exe': paths['exe_root'].format(exe='ibdmix')}

    if 'population' in wildcards.keys() and 'sample_file' in paths:
        result['samples'] = paths['sample_file'].format(
            population=wildcards.population)

    if 'mask_file' in paths:
        result['mask'] = paths['mask_file'].format(chrom=wildcards.chrom)

    return result

def get_ibd_options(wildcards, input):
    result = ''
    if 'samples' in input.keys():
        result += f'--sample {input.samples} '
    if 'mask' in input.keys():
        result += f'--mask {input.mask} '

    return result

rule ibdmix:
    input:
        unpack(get_ibd_input)

    output:
        paths['ibd_output']

    params: options=get_ibd_options

    shell:
        '{input.exe} '
            '--genotype <(zcat {input.genotype}) '
            '--output >(gzip > {output}) '
            '{params.options} '
            '{config[IBDmix][options]} '

rule summary:
    input:
        exe=paths['source_root']+'summary.sh',
        ibd=paths['ibd_output']

    output:
        paths['ibd_summary']

    shell:
        'zcat {input.ibd} | '
        '{input.exe} '
            '{wildcards.length} '
            '{wildcards.LOD} '
            '{wildcards.population} '
        '| gzip > {output} '

def combine_input(wildcards):
    partial_summary = paths['ibd_summary']\
        .replace('{chrom}', wildcards.chrom)\
        .replace('{LOD}', wildcards.LOD)\
        .replace('{length}', wildcards.length)
    return expand(partial_summary, population=populations)

rule combine:
    input:
        combine_input

    output:
        paths['combined_summary']

    shell:
        "zcat {input} | awk "
            "'NR == 1 || !/^ID\tchr/ {{ print }}' "
        " > {output} "
